openapi: 3.0.0
info:
  title: NAKAR
  version: 1.0.0
tags:
  - name: Scenario
  - name: ScenarioGroup
  - name: Database
  - name: Room
  - name: System
paths:
  /scenario:
    get:
      tags:
        - Scenario
      operationId: getScenarios
      parameters:
        - name: scenarioGroupId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScenarios'
  /scenario/{id}/initial-graph:
    get:
      tags:
        - Scenario
      operationId: getInitialGraph
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInitialGraph'

  /scenario-group:
    get:
      tags:
        - ScenarioGroup
      operationId: getScenarioGroups
      parameters:
        - name: databaseId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScenarioGroups'

  /database:
    get:
      tags:
        - Database
      operationId: getDatabases
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDatabases'

  /room:
    get:
      tags:
        - Room
      operationId: getRooms
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRooms'
  /room/{id}:
    get:
      tags:
        - Room
      operationId: getRoom
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoom'

  /system/version:
    get:
      tags:
        - System
      operationId: getVersion
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVersion'

components:
  schemas:
    PresetColorIndex:
      type: integer
      enum: [ 0, 1, 2, 3, 4, 5 ]

    PresetColor:
      type: object
      properties:
        index:
          $ref: '#/components/schemas/PresetColorIndex'
      required:
        - index

    CustomColor:
      type: object
      properties:
        backgroundColor:
          type: string
        textColor:
          type: string
      required:
        - backgroundColor
        - textColor

    Color:
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/PresetColor'
        - $ref: '#/components/schemas/CustomColor'

    GraphLabel:
      type: object
      properties:
        label:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        count:
          type: integer
      required:
        - label
        - color
        - count

    GraphProperty:
      type: object
      properties:
        slug:
          type: string
        value:
          $ref: '#/components/schemas/GraphPropertyValue'
      required:
        - slug
        - value
    GraphPropertyValue: {}

    Node:
      type: object
      properties:
        id:
          type: string
        displayTitle:
          type: string
        labels:
          type: array
          items:
            type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/GraphProperty'
        radius:
          type: number
        position:
          type: object
          properties:
            x:
              type: number
            y:
              type: number
          required:
            - x
            - y
        inDegree:
          type: integer
        outDegree:
          type: integer
        degree:
          type: integer
        nameInQuery:
          type: string
        displayConfigurationContext: {}
        backgroundColor:
          type: string
          nullable: true
        titleColor:
          type: string
          nullable: true
      required:
        - id
        - displayTitle
        - labels
        - properties
        - radius
        - position
        - inDegree
        - outDegree
        - degree
        - nameInQuery
        - displayConfigurationContext
        - backgroundColor
        - titleColor

    Edge:
      type: object
      properties:
        id:
          type: string
        startNodeId:
          type: string
        endNodeId:
          type: string
        type:
          type: string
        isLoop:
          type: boolean
        parallelCount:
          type: integer
        parallelIndex:
          type: integer
        compressedCount:
          type: integer
        properties:
          type: array
          items:
            $ref: '#/components/schemas/GraphProperty'
        nameInQuery:
          type: string
      required:
        - id
        - startNodeId
        - endNodeId
        - type
        - properties
        - isLoop
        - parallelCount
        - parallelIndex
        - compressedCount
        - nameInQuery

    Graph:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        metaData:
          type: object
          properties:
            labels:
              type: array
              items:
                $ref: '#/components/schemas/GraphLabel'
          required:
            - labels
      required:
        - nodes
        - edges
        - metaData

    GetInitialGraph:
      type: object
      properties:
        graph:
          $ref: '#/components/schemas/Graph'
        tableData:
          type: array
          items:
            type: object
            additionalProperties: { }
      required:
        - graph
        - tableData

    GetRoom:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          nullable: true
      required:
        - id
        - title
    GetRooms:
      type: object
      properties:
        rooms:
          type: array
          items:
            $ref: "#/components/schemas/GetRoom"
      required:
        - rooms

    GetDatabase:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        browserUrl:
          type: string
          nullable: true
      required:
        - id
        - title
        - url
        - browserUrl
    GetDatabases:
      type: object
      properties:
        databases:
          type: array
          items:
            $ref: "#/components/schemas/GetDatabase"
      required:
        - databases

    GetScenarioGroup:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          nullable: true
      required:
        - id
        - title
    GetScenarioGroups:
      type: object
      properties:
        scenarioGroups:
          type: array
          items:
            $ref: "#/components/schemas/GetScenarioGroup"
      required:
        - scenarioGroups

    GetScenario:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          nullable: true
        query:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        coverUrl:
          type: string
          format: uri
          nullable: true
      required:
        - id
        - title
        - query
        - description
        - coverUrl
    GetScenarios:
      type: object
      properties:
        scenarios:
          type: array
          items:
            $ref: "#/components/schemas/GetScenario"
      required:
        - scenarios

    GetVersion:
      type: object
      properties:
        version:
          type: string
      required:
        - version
