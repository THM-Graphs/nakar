{
	"version": 2,
	"data": {
		"api::database.database": {
			"1": {
				"id": 1,
				"documentId": "a21ce7877ulatqwuadb3jyff",
				"title": "POSE",
				"username": "neo4j",
				"password": "12345678",
				"createdAt": "2024-12-20T20:41:04.634Z",
				"updatedAt": "2024-12-24T11:29:58.638Z",
				"publishedAt": null,
				"locale": null,
				"url": "neo4j://localhost:7687",
				"scenarios": [
					7,
					9,
					11,
					13,
					15,
					17,
					19,
					21,
					23,
					25,
					27,
					29,
					31,
					33,
					35,
					37,
					39,
					41,
					43,
					47,
					49,
					51,
					53,
					45
				],
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"7": {
				"id": 7,
				"documentId": "qcjwtxbg4ec2m16kjitrf2im",
				"title": "draft",
				"username": null,
				"password": null,
				"createdAt": "2024-12-20T21:46:44.581Z",
				"updatedAt": "2024-12-20T21:46:44.581Z",
				"publishedAt": null,
				"locale": null,
				"url": null,
				"scenarios": [],
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"9": {
				"id": 9,
				"documentId": "wroy4ttljvdmtar40lkvwp8p",
				"title": "Romantikerbriefe",
				"username": "neo4j",
				"password": "LKctkE700vwYnbQE",
				"createdAt": "2024-12-22T23:59:07.625Z",
				"updatedAt": "2024-12-24T11:30:17.371Z",
				"publishedAt": null,
				"locale": null,
				"url": "neo4j+s://kfr.adwmainz.net:7687",
				"scenarios": [
					55
				],
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"11": {
				"id": 11,
				"documentId": "pt87xe6ambue9wa52jeddt98",
				"title": "Wikidata",
				"username": "neo4j",
				"password": "1234",
				"createdAt": "2024-12-23T00:01:23.125Z",
				"updatedAt": "2024-12-24T11:30:36.678Z",
				"publishedAt": null,
				"locale": null,
				"url": "neo4j+s://wikidata.mni.thm.de:7687",
				"scenarios": [
					57,
					60,
					63,
					67,
					71,
					75,
					77,
					80
				],
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"16": {
				"id": 16,
				"documentId": "zbgmk89n6ssljcv1bo9mktgj",
				"title": "JLU Buster",
				"username": "neo4j",
				"password": "GraphbasierteSysteme",
				"createdAt": "2024-12-27T12:31:52.471Z",
				"updatedAt": "2024-12-27T12:32:45.115Z",
				"publishedAt": null,
				"locale": null,
				"url": "neo4j+s://jlu-buster.mni.thm.de:9781",
				"scenarios": [],
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			}
		},
		"api::scenario.scenario": {
			"7": {
				"id": 7,
				"documentId": "av91adpz6a43ppgkmxgly9jh",
				"title": "General Queries - Schema",
				"query": "call db.schema.visualization()",
				"createdAt": "2024-12-27T19:41:55.756Z",
				"updatedAt": "2024-12-27T20:42:03.363Z",
				"publishedAt": null,
				"locale": null,
				"description": "Review the metagraph, and see the types of nodes and relationships we’re going to be working with.\n\nNotice the different ways that Persons can be related to each other. There is a general 'KNOWS' relationship, as well as more specific relationship types: FAMILY_REL (related to), KNOWS_LW (lives with), KNOWS_PHONE (has a related phone call), and KNOWS_SN (social network).\n\nNotice also that Location is associated to both Postcode and Area. In the UK, Postcodes follow a format which splits the postcode into two sections - for example, M1 1AA. In this example, 'M1 1AA' is the Postcode, and 'M1' is the area. This allows us to group locations in different ways, and build query paths that are either more specific (like Postcode, which is typically limited to a street or a few blocks) or more general (like Area, which could cover a town or city neighbourhood).",
				"cover": 1,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"9": {
				"id": 9,
				"documentId": "e4mk6ed77eglx13nswb6myy5",
				"title": "General Queries - Crime totals",
				"query": "MATCH (c:Crime)\nRETURN c.type AS crime_type, count(c) AS total\nORDER BY count(c) DESC",
				"createdAt": "2024-12-27T19:47:01.054Z",
				"updatedAt": "2024-12-27T20:42:17.451Z",
				"publishedAt": null,
				"locale": null,
				"description": "Let’s have a look at the types of crimes in the graph, and the number of times each occurred:\n\nYou should see that 'Violence and sexual offences' was the highest category of crimes for the month, with weapons offences being the category with the lowest count.",
				"cover": 1,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"11": {
				"id": 11,
				"documentId": "jjca7al0m08xy1ixfwpypajf",
				"title": "General Queries - Top locations for crimes",
				"query": "MATCH (l:Location)<-[:OCCURRED_AT]-(:Crime)\nRETURN l.address AS address, l.postcode AS postcode, count(l) AS total\nORDER BY count(l) DESC\nLIMIT 15",
				"createdAt": "2024-12-27T19:47:37.326Z",
				"updatedAt": "2024-12-27T19:47:37.326Z",
				"publishedAt": null,
				"locale": null,
				"description": "Let’s also look at the top locations in the graph where crimes have been recorded.\n\nYou should see several obvious public places and institutions with high numbers of crime associated - Piccadilly (the area near the main rail station in Manchester), a Shopping Area (and a nearby Prison), etc. There are some residential-looking addresses towards the bottom of the list with pretty high numbers (i.e. 35 crimes at both 182 Waterson Avenue and 43 Walker’s Croft).",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"13": {
				"id": 13,
				"documentId": "ij0a8ctbutwb6f5sdcmtunho",
				"title": "General Queries - Crimes near a particular address",
				"query": "MATCH (l:Location {address: '1 Coronation Street', postcode: 'M5 3RW'})\nWITH point(l) AS corrie\nMATCH (x:Location)-[:HAS_POSTCODE]->(p:PostCode),\n(x)<-[:OCCURRED_AT]-(c:Crime)\nWITH x, p, c, point.distance(point(x), corrie) AS distance\nWHERE distance < 500\nRETURN x.address AS address, p.code AS postcode, count(c) AS crime_total, collect(distinct(c.type)) AS crime_type, distance\nORDER BY distance\nLIMIT 10",
				"createdAt": "2024-12-27T19:47:59.469Z",
				"updatedAt": "2024-12-27T19:47:59.469Z",
				"publishedAt": null,
				"locale": null,
				"description": "The popular UK television drama 'Coronation Street' is set in a fictional Manchester-area neighbourhood. There’s a Coronation Street address in the graph (1 Coronation Street, home of the Barlow family in the show). Using the longitude and latitude properties in our Location nodes we can do a distance-based search to find crimes that are within 500 metres of this address.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"15": {
				"id": 15,
				"documentId": "m8f3rsfe4c0s7laeocncxgit",
				"title": "General Queries - Crimes investigated by Inspector Morse",
				"query": "MATCH (o:Officer {rank: 'Chief Inspector', surname: 'Morse'})<-[i:INVESTIGATED_BY]-(c:Crime)\nRETURN *",
				"createdAt": "2024-12-27T19:48:39.237Z",
				"updatedAt": "2024-12-27T19:48:39.237Z",
				"publishedAt": null,
				"locale": null,
				"description": "Another popular UK television drama is 'Inspector Morse'. There’s also an Inspector Morse in our graph - let’s see what Crimes he is investigating.\n\nYou should see quite a number of Crime nodes connected by the INVESTIGATED_BY relationship to the Inspector Morse node. Take a few minutes to click on some of them to expand the graph and see what other nodes are related to some of these Crimes.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"17": {
				"id": 17,
				"documentId": "dxvyv556dpom6t0uawej27py",
				"title": "Crime Investigation - Crimes under investigation by Officer Larive",
				"query": "MATCH (c:Crime {last_outcome: 'Under investigation'})-[i:INVESTIGATED_BY]->(o:Officer {badge_no: '26-5234182', surname: 'Larive'})\nreturn *",
				"createdAt": "2024-12-27T19:55:34.951Z",
				"updatedAt": "2024-12-27T19:55:34.951Z",
				"publishedAt": null,
				"locale": null,
				"description": "Let’s say we are interested in the crimes that are under investigation by Police Constable Devy Larive (Badge Number 26-5234182).\n\nWe can see Police Constable Larive is investigating a number of crimes at the moment. In particular we can see that PC Larive is investigating three Drugs Crimes. Double clicking on these three Drugs crimes shows us:\n\nTwo of them are for the charge Possession of Cannabis with Intent To Supply, occurring at the same address and having the same related person (Jack Powell). These crimes have evidence attached to them - large amounts of currency, some cannabis, and an electronic scale (all indicators of cannabis sale/distribution).\n\nThe third Crime is for the charge 'Production of Cannabis with Intent To Supply', related to Raymond Walker. This crime also has two Evidence nodes attached.\n\nWe could click on these nodes and manually explore the graph to get more information, but instead let’s write some queries which can help us investigate further.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"19": {
				"id": 19,
				"documentId": "rjv70cowfvjggt2swj0jflxe",
				"title": "Crime Investigation - Shortest path between persons related to crimes",
				"query": "MATCH (c:Crime {last_outcome: 'Under investigation', type: 'Drugs'})-[:INVESTIGATED_BY]->(:Officer {badge_no: '26-5234182'}),\n(c)<-[:PARTY_TO]-(p:Person)\nWITH COLLECT(p) AS persons\nUNWIND persons AS p1\nUNWIND persons AS p2\nWITH * WHERE id(p1) < id(p2)\nMATCH path = allshortestpaths((p1)-[:KNOWS|KNOWS_LW|KNOWS_SN|FAMILY_REL|KNOWS_PHONE*..3]-(p2))\nRETURN path",
				"createdAt": "2024-12-27T19:56:13.857Z",
				"updatedAt": "2024-12-27T19:56:13.857Z",
				"publishedAt": null,
				"locale": null,
				"description": "Let’s see if the two Persons - Jack Powell and Raymond Walker - associated with these three Drugs Crimes are somehow connected in the graph. We’ll look for all of the shortest paths between them of 3 or fewer hops along all types of 'KNOWS' relationships. We can ignore the direction of the relationships in this query, as we’re not interested in which direction they point.\n\nIt turns out they are part of what looks like a social group. Two of Raymond’s family relations (his father Phillip and sister Kathleen) know Alan Ward, who is the brother of Jack Powell. Raymond’s father Phillip also lives with Jack’s father Brian. Knowing that Raymond is under investigation for production of cannabis, that Jack is under investigation for two separate charges of possession of cannabis with intent to supply, and that they seem to be part of a social group we can speculate it’s possible that they know each other and that Jack is getting his cannabis from Raymond.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"21": {
				"id": 21,
				"documentId": "puco14fr7ue735yzd9eb3b78",
				"title": "Crime Investigation - Other related people associated with drugs crimes",
				"query": "MATCH path = (:Officer {badge_no: '26-5234182'})<-[:INVESTIGATED_BY]-(:Crime {type: 'Drugs'})<-[:PARTY_TO]-(:Person)-[:KNOWS*..3]-(:Person)-[:PARTY_TO]->(:Crime {type: 'Drugs'})\nRETURN path",
				"createdAt": "2024-12-27T19:56:57.907Z",
				"updatedAt": "2024-12-27T19:56:57.907Z",
				"publishedAt": null,
				"locale": null,
				"description": "To build an even stronger case let’s look at the social networks of Jack Powell and Raymond Walker, and see if anyone else within 3 hops of them along 'KNOWS' relationships is also related to a Drugs Crime.\n\nThis query reveals an interesting and somewhat dense social network, including family relations and people who live with one another. Reviewing the graph we can see:\n\nJack is also under investigation (by different officers) for two other Drugs Crimes. PC Larive might want to try to get information on those cases, too.\n\nJack’s father Brian is related to three Drugs Crimes - each time charged with Possession of Cannabis.\n\nWithin 3 hops of both Raymond and Jack is Diana Murray, who is related to three Drugs Crimes - one of simple possession and two with intent to supply.\n\nIt’s possible that Raymond has been growing cannabis and supplying it to Jack and Diana, both of whom are then dealing it onward. Take a few minutes to explore the relationships and understand how Raymond, Jack, and Diana may know each other.\n\nWe might also be able to infer some additional relationships in this graph:\n\nGiven that Kathleen and Phillip both know Alan, it is possible that Raymond knows Alan - even though that’s not explicit in the graph?\n\nSimilarly, given that Alan and Brian know Phillip, is likely that Jack knows Phillip as well?",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"23": {
				"id": 23,
				"documentId": "vpq2crn1gkwq60fkvdl2209d",
				"title": "Vulnerable Persons Investigation - Top 5 vulnerable people in the graph",
				"query": "MATCH (p:Person)-[:KNOWS]-(friend)-[:PARTY_TO]->(:Crime)\nWHERE NOT (p:Person)-[:PARTY_TO]->(:Crime)\nRETURN p.name AS name, p.surname AS surname, p.nhs_no AS id, count(distinct friend) AS dangerousFriends\nORDER BY dangerousFriends DESC\nLIMIT 5",
				"createdAt": "2024-12-27T19:57:37.231Z",
				"updatedAt": "2024-12-27T19:57:37.231Z",
				"publishedAt": null,
				"locale": null,
				"description": "Now we can explore a series of queries to simulate research on 'vulnerable' or 'at risk' individuals in the graph. This might be especially important in a social services or child protection use case. Here we have defined 'vulnerable person' as someone who is not themselves associated to a crime, but who knows many people who are. Run the query below to generate a list of the Top 5 most vulnerable people in the graph.\n\nWe will be referring to this list of Vulnerable people throughout the next few steps, so you may want to keep the results handy (try using the tack icon to pin them to the top).",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"25": {
				"id": 25,
				"documentId": "ozlag57gvi38lk8jr58ep3x2",
				"title": "Vulnerable Persons Investigation - Friends of Friends",
				"query": "MATCH (p:Person)-[:KNOWS*1..2]-(friend)-[:PARTY_TO]->(:Crime)\nWHERE NOT (p:Person)-[:PARTY_TO]->(:Crime)\nRETURN p.name AS name, p.surname AS surname, p.nhs_no AS id, count(distinct friend) AS dangerousFriends\nORDER BY dangerousFriends DESC\nLIMIT 5",
				"createdAt": "2024-12-27T19:58:12.947Z",
				"updatedAt": "2024-12-27T19:58:12.947Z",
				"publishedAt": null,
				"locale": null,
				"description": "Using Cypher it’s then very easy to explore the graph out through a wider social circle. A small change to the query allows us to see not only friends of individuals who are associated with crimes, but also 'friends of friends' who are associated with crimes as well.\n\nTry modifying the query to look at 'friends of friends of friends' (3 'KNOWS' relationships out) and see how that changes the results.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"27": {
				"id": 27,
				"documentId": "so8ujqw4jwd21g3sqphb05vw",
				"title": "Vulnerable Persons Investigation - Exploring a Vulnerable Person’s graph",
				"query": "MATCH path = (:Location)<-[:CURRENT_ADDRESS]-(:Person {nhs_no: '804-54-6976', surname: 'Freeman'})-[:KNOWS]-(:Person)-[:PARTY_TO]->(:Crime)\nRETURN path",
				"createdAt": "2024-12-27T19:58:41.188Z",
				"updatedAt": "2024-12-27T19:58:41.188Z",
				"publishedAt": null,
				"locale": null,
				"description": "Let’s explore the graph for the top result from our original Vulnerable Persons results (which, hopefully, you’ve pinned in a previous step).\n\nWe can see that Anne Freeman has 8 dangerous friends. Using her ID, this query shows us the graph of these friends, which we can navigate and explore.\n\nYou can also try updating this query to show 'friends of friends' or 'friends of friends of friends' like we did previously.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"29": {
				"id": 29,
				"documentId": "r3i3zr1ogids67kiamix15d1",
				"title": "Vulnerable Persons Investigation - Looking for local Dangerous Friends",
				"query": "MATCH (anne:Person {nhs_no: '804-54-6976', surname: 'Freeman'})-[k:KNOWS]-(friend)-[pt:PARTY_TO]->(c:Crime),\n(anne)-[ca1:CURRENT_ADDRESS]->(aAddress)-[lia1:LOCATION_IN_AREA]->(area),\n(friend)-[ca2:CURRENT_ADDRESS]->(fAddress)-[lia2:LOCATION_IN_AREA]->(area)\nRETURN *",
				"createdAt": "2024-12-27T19:59:06.462Z",
				"updatedAt": "2024-12-27T19:59:06.462Z",
				"publishedAt": null,
				"locale": null,
				"description": "Now that we’ve seen Anne Freeman’s social circle, it would be good to know whether any of her dangerous friends is actually local to her (in her area, or neighbourhood).\n\nWe can see it’s only her friend Craig, who she knows through social networks, that lives in the same Area (SK1) as Anne. Craig has been associated with two Public Order offences.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"31": {
				"id": 31,
				"documentId": "mwl15glfu35ev13dhaeh29cq",
				"title": "Vulnerable Persons Investigation - Looking for connections between Vulnerable Persons",
				"query": "MATCH (p:Person)-[:KNOWS]-(friend)-[:PARTY_TO]->(:Crime)\nWHERE NOT (p:Person)-[:PARTY_TO]->(:Crime)\nWITH p, count(distinct friend) AS dangerousFriends\nORDER BY dangerousFriends DESC\nLIMIT 5\nWITH COLLECT (p) AS people\nUNWIND people AS p1\nUNWIND people AS p2\nWITH * WHERE id(p1) <> id (p2)\nMATCH path = shortestpath((p1)-[:KNOWS*]-(p2))\nRETURN path",
				"createdAt": "2024-12-27T19:59:35.423Z",
				"updatedAt": "2024-12-27T19:59:35.423Z",
				"publishedAt": null,
				"locale": null,
				"description": "Going back to the list of vulnerable people, let’s see if any of them are connected. This query takes the results of the vulnerable people query and looks for paths of 'KNOWS' relationships that connect them.\n\nIt turns out there are connections between them, of different lengths. There are actually multiple paths by which some of them are connected.\n\nWe’re finished now with the original list of vulnerable people and those results can be closed or unpinned.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"33": {
				"id": 33,
				"documentId": "mmvdpgpxyywtodz09t1mnudg",
				"title": "Vulnerable Persons Investigation - Looking for Dangerous Family Friends",
				"query": "MATCH (p:Person)-[:FAMILY_REL]-(relative)-[:KNOWS]-(famFriend)-[:PARTY_TO]->(:Crime)\nWHERE NOT (p:Person)-[:PARTY_TO]->(:Crime) AND\n NOT (relative)-[:PARTY_TO]->(:Crime)\nRETURN p.name AS name, p.surname AS surname, p.nhs_no AS id, count(DISTINCT famFriend) AS DangerousFamilyFriends\nORDER BY DangerousFamilyFriends DESC\nLIMIT 5",
				"createdAt": "2024-12-27T20:00:05.758Z",
				"updatedAt": "2024-12-27T20:00:05.758Z",
				"publishedAt": null,
				"locale": null,
				"description": "We can now write another query looking for vulnerable or at risk individuals, but this time based on their family relationships rather than their direct social relationships. We’ll look for people who are not directly related to a crime, and neither is their relative, but their relative has dangerous friends.\n\nYou should see 5 people who have family members with dangerous friends.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"35": {
				"id": 35,
				"documentId": "h2lniyzu5reaaiejryxtyc01",
				"title": "Vulnerable Persons Investigation - Looking for Dangerous Family Friends",
				"query": "MATCH (p:Person)-[:FAMILY_REL]-(relative)-[:KNOWS]-(famFriend)-[:PARTY_TO]->(:Crime),\n(p)-[:CURRENT_ADDRESS]->(:Location)<-[:CURRENT_ADDRESS]-(relative)\nWHERE NOT (p:Person)-[:PARTY_TO]->(:Crime) AND\n NOT (relative)-[:PARTY_TO]->(:Crime)\nRETURN p.name AS name, p.surname AS surname, p.nhs_no AS id, count(DISTINCT famFriend) AS DangerousFamilyFriends\nORDER BY DangerousFamilyFriends DESC\nLIMIT 5",
				"createdAt": "2024-12-27T20:00:27.891Z",
				"updatedAt": "2024-12-27T20:00:27.891Z",
				"publishedAt": null,
				"locale": null,
				"description": "The previous query returned a good set of at risk individuals. However, it’s probably not specific enough - it would be more interesting to see this list with an additional requirement that the vulnerable individuals live with their relative who has dangerous friends.\n\nThis version of the query returns only 2 people, but the one with the highest number of dangerous family friends (Kimberly Alexander) is the same as from the results of the previous query.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"37": {
				"id": 37,
				"documentId": "pus2kurlkz5y9cvt3d8l7sp8",
				"title": "Vulnerable Persons Investigation - Exploring a Vulnerable Person’s graph",
				"query": "MATCH path = (relative:Person)-[:CURRENT_ADDRESS]->(:Location)<-[:CURRENT_ADDRESS]-(:Person {nhs_no: '548-59-5017', surname: 'Alexander'})-[:FAMILY_REL]-(relative)-[:KNOWS]-(:Person)-[:PARTY_TO]->(:Crime)\nRETURN path",
				"createdAt": "2024-12-27T20:00:50.718Z",
				"updatedAt": "2024-12-27T20:00:50.718Z",
				"publishedAt": null,
				"locale": null,
				"description": "We can view Kimberley’s graph, and see that Kimberly (age 12) lives with her mother Bonnie at 53 Ridge Grove. Bonnie has several friends who are related to a number of crimes of varying types. There’s a high chance that Kimberly is being exposed to these people, potentially putting her at risk.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"39": {
				"id": 39,
				"documentId": "q14xdfb1twwptgxdjgg1abyk",
				"title": "Graph Algorithms - Graph projection",
				"query": "CALL gds.graph.project('social',\n  'Person',\n  {KNOWS: {orientation:'UNDIRECTED'}})",
				"createdAt": "2024-12-27T20:03:03.091Z",
				"updatedAt": "2024-12-27T20:03:03.091Z",
				"publishedAt": null,
				"locale": null,
				"description": "Lastly, we can have a look at a few graph algorithms and see how they can be applied to our use case. Graph algorithms are executed on in-memory graph projections. You have the option to project the whole stored graph or only a subset of the graph depending on your requirements.\n\nRun the following query to project Person nodes and KNOWS relationships in the in-memory graph.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"41": {
				"id": 41,
				"documentId": "n4mphqgjlm3njw6lybcenvhd",
				"title": "Algorithms - Triangle Count",
				"query": "CALL gds.triangleCount.stream('social')\n  YIELD nodeId, triangleCount as triangles\nWITH gds.util.asNode(nodeId) AS node, triangles\nRETURN node.name AS name, node.surname AS surname, node.nhs_no AS id, triangles\nORDER BY triangles DESC\nLIMIT 10;",
				"createdAt": "2024-12-27T20:03:34.442Z",
				"updatedAt": "2024-12-27T20:03:34.442Z",
				"publishedAt": null,
				"locale": null,
				"description": "The triangle count algorithm returns 'triangles' of connected nodes - in this case, groups of three Persons where every node in the group 'KNOWS' the others ('A' knows 'B' knows 'C' knows 'A'). This is a common approach when analysing social graphs, where the incidence of such triangles is higher than it would be in a random data set/sample. This identifies communities or clusters of connectivity in graphs, and might be used in a policing context to identify gangs or other criminal/suspected groups.\n\nRun the following query to identify Person nodes in our graph who are members of the highest number of triangles.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"43": {
				"id": 43,
				"documentId": "s37qcudwjscbuhu55um4sohc",
				"title": "Algorithms - Triangle Count 2",
				"query": "MATCH path = (p1:Person {nhs_no: '838-45-9343', surname: 'Ford'})-[:KNOWS]-(p2)-[:KNOWS]-(p3)-[:KNOWS]-(p1)\nRETURN path",
				"createdAt": "2024-12-27T20:04:04.254Z",
				"updatedAt": "2024-12-27T20:04:04.254Z",
				"publishedAt": null,
				"locale": null,
				"description": "We can take a look at the graph for one of the sets of triangles that was returned - Deborah Ford, who belongs to ten triangles.\n\nWe can see that Patricia Carr knows both Deborah Ford and Jonathan Hunt, and both Deborah and Jonathan know Peter Bryant, Harry Lopez, and Phillip Perry. We can might therefore infer that Patricia knows Peter, Harry, and Phillip as well.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"45": {
				"id": 45,
				"documentId": "fsj0139tt8x3prf49w78s6cn",
				"title": "Algorithms - Triangle Count on a Subgraph",
				"query": "MATCH (p0:Person)-[:PARTY_TO]->(:Crime)\nWITH collect(DISTINCT id(p0)) as criminalPartyIds\nMATCH (s:Person)-[r:KNOWS]->(t:Person)\nWHERE (id(s) IN criminalPartyIds) AND (id(t) IN criminalPartyIds)\nWITH gds.alpha.graph.project('crime-associates', s, t,\n    {sourceNodeLabels:labels(s), targetNodeLabels:labels(t)},\n    {relationshipType:type(r)}, {undirectedRelationshipTypes:[type(r)]}) AS g\nRETURN g.graphName AS graph, g.nodeCount AS nodes, g.relationshipCount AS rels",
				"createdAt": "2024-12-27T20:05:20.849Z",
				"updatedAt": "2024-12-27T20:40:55.708Z",
				"publishedAt": null,
				"locale": null,
				"description": "The previous query was interesting, but we ran it against the entire graph. We can use the same algorithm on a sub-graph - for instance, only people who associated with crimes. This returns a different set of triangles, consisting only of people associated with crimes who appear in communities/clusters.\n\nRun the following query to project a subgraph that contains only people associated with crimes.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"47": {
				"id": 47,
				"documentId": "ajpa031qzd4jybvo33ky7jqj",
				"title": "Algorithms - Triangle Count on a Subgraph 2",
				"query": "CALL gds.triangleCount.stream('crime-associates')\nYIELD nodeId, triangleCount as triangles\nWITH gds.util.asNode(nodeId) AS node, triangles\nRETURN node.name AS name, node.surname AS surname, node.nhs_no AS id, triangles\nORDER BY triangles DESC\nLIMIT 5;",
				"createdAt": "2024-12-27T20:05:34.751Z",
				"updatedAt": "2024-12-27T20:05:34.751Z",
				"publishedAt": null,
				"locale": null,
				"description": "After you have projected the in-memory graph, you can run the triangle count of the crime associate subgraph by executing the following query.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"49": {
				"id": 49,
				"documentId": "attt9dw7t5f0oe1trjmui4jq",
				"title": "Algorithms - Triangle Count on a Subgraph 3",
				"query": "MATCH (p1:Person {nhs_no: '337-28-4424', surname: 'Williamson'})-[k1:KNOWS]-(p2)-[k2:KNOWS]-(p3)-[k3:KNOWS]-(p1)\nWITH *\nMATCH (person)-[pt:PARTY_TO]->(crime) WHERE person IN[p1, p2, p3]\nRETURN *",
				"createdAt": "2024-12-27T20:06:04.706Z",
				"updatedAt": "2024-12-27T20:06:04.706Z",
				"publishedAt": null,
				"locale": null,
				"description": "Looking at the triangles associated to one of the top results from the previous query (Phillip Williamson) shows an interesting group of people who know each other, are related to each other, and/or live with each other. The names look familiar from our previous Drugs investigation - we have quite a group of potential criminals here. In addition to the Drugs Crimes there are a lot of Vehicle Crimes associated with this social group. Perhaps this is a gang which specialises in car theft. It’s interesting to note how the algorithms automatically turned up something we needed to specifically search for earlier (during our Drugs search we had specific Officer and Person starting nodes from our search).\n\n",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"51": {
				"id": 51,
				"documentId": "fkf943snzywuz27vcns6y7k4",
				"title": "Algorithms - Betweenness Centrality",
				"query": "CALL gds.betweenness.stream('social')\nYIELD nodeId, score AS centrality\nWITH gds.util.asNode(nodeId) AS node, centrality\nRETURN node.name AS name, node.surname AS surname, node.nhs_no AS id, toInteger(centrality) AS score\nORDER BY centrality DESC\nLIMIT 10;",
				"createdAt": "2024-12-27T20:06:29.051Z",
				"updatedAt": "2024-12-27T20:06:29.051Z",
				"publishedAt": null,
				"locale": null,
				"description": "The betweenness algorithm measures centrality in the graph - a way of identifying the most important nodes in a graph. It does this by identifying nodes which sit on the shortest path between many other nodes and scoring them more highly. We can see the people here which are potentially important in the graph by using this measure - they sit on the shortest path between the most other people via the 'KNOWS' relationship (ignoring relationships direction, as it’s not very important here). Information and resources tend to flow along the shortest paths in a graph, so this is one good way of identifying central nodes or 'bridge' nodes between communities in the graph.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"53": {
				"id": 53,
				"documentId": "pg9d2owzmmr1q2gwzyrrobg3",
				"title": "Algorithms - Betweenness Centrality 2",
				"query": "MATCH path = (:Person {nhs_no: '863-96-9468', surname: 'Duncan'})-[:KNOWS*..3]-(:Person)\nRETURN path",
				"createdAt": "2024-12-27T20:06:59.073Z",
				"updatedAt": "2024-12-27T20:06:59.073Z",
				"publishedAt": null,
				"locale": null,
				"description": "We can explore the graph for the top result from the previous query (Annie Duncan) out to 3 levels and see how well connected she is. She does appear to sit between several clusters/communities at the edge of this graph. We get even more results if we look farther out than 3 hops, but the results would be harder to visualise and take longer to draw on the screen.",
				"cover": null,
				"database": 1,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"55": {
				"id": 55,
				"documentId": "rbus1aw88wttbyaxvy6a9wxr",
				"title": "Wer hat wem geschrieben? (Balls of Death)",
				"query": "MATCH p=()-[r:sends_letter]->() RETURN p LIMIT 50\n",
				"createdAt": "2024-12-27T20:09:49.761Z",
				"updatedAt": "2024-12-27T20:09:49.761Z",
				"publishedAt": null,
				"locale": null,
				"description": "Balls of Death?",
				"cover": null,
				"database": 9,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"57": {
				"id": 57,
				"documentId": "jjxnu65jj0qx2wq87qp08ib8",
				"title": "Friedrich III",
				"query": "MATCH (n:Entity {id:'Q150966'})-[:POSITION_HELD]->(e:Entity {label:'Holy Roman Emperor'})\nRETURN *;\n",
				"createdAt": "2024-12-27T20:11:48.711Z",
				"updatedAt": "2024-12-27T20:14:05.262Z",
				"publishedAt": null,
				"locale": null,
				"description": "Fehlende Relationship",
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"60": {
				"id": 60,
				"documentId": "u0kpo57n4fkcd0xclrqva6p8",
				"title": "Alle Kaiser des heiligen römischen Reiches",
				"query": "MATCH (n:Entity)-[:POSITION_HELD]->(e:Entity {label:'Holy Roman Emperor'})\nRETURN *;\n",
				"createdAt": "2024-12-27T20:14:32.233Z",
				"updatedAt": "2024-12-27T20:15:02.928Z",
				"publishedAt": null,
				"locale": null,
				"description": "Fehlende Relationships",
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"63": {
				"id": 63,
				"documentId": "y7cb52x75a9wf2gyjhocdtmb",
				"title": "Kantenanzahlen",
				"query": "MATCH (e2:Entity)-[r2]-(n:Entity {id:'Q150966'})-[:POSITION_HELD]->(e:Entity {label:'Holy Roman Emperor'})\nRETURN type(r2) AS label, count(*) AS Anzahl ORDER BY Anzahl DESC;\n",
				"createdAt": "2024-12-27T20:15:32.734Z",
				"updatedAt": "2024-12-27T20:16:16.486Z",
				"publishedAt": null,
				"locale": null,
				"description": null,
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"67": {
				"id": 67,
				"documentId": "buq1uulrvyzvds5uxpeuiwt5",
				"title": "Todesursachen der Kaiser",
				"query": "MATCH (d:Entity)<-[:CAUSE_OF_DEATH]-(n:Entity)-[:POSITION_HELD]->(e:Entity {label:'Holy Roman Emperor'})\nRETURN *",
				"createdAt": "2024-12-27T20:16:37.274Z",
				"updatedAt": "2024-12-27T20:18:02.522Z",
				"publishedAt": null,
				"locale": null,
				"description": null,
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"71": {
				"id": 71,
				"documentId": "kvi2nfjiksw2gpgyyn0ot37o",
				"title": "Bundestagsmitglieder",
				"query": "MATCH (n:Entity)-[r:POSITION_HELD]->(e:Entity {label:'member of the German Bundestag'})\nRETURN *\n",
				"createdAt": "2024-12-27T20:18:16.133Z",
				"updatedAt": "2024-12-27T20:19:13.507Z",
				"publishedAt": null,
				"locale": null,
				"description": null,
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"75": {
				"id": 75,
				"documentId": "ivwvcj8si3wjhglzktz4do9o",
				"title": "Bundestagsmitglieder und Herkunft",
				"query": "MATCH (p:Entity)<-[:PLACE_OF_BIRTH]-\n(n:Entity)-[:POSITION_HELD]->(e:Entity {label:'member of the German Bundestag'})\nRETURN p.label, count(*) AS Anzahl ORDER BY Anzahl DESC",
				"createdAt": "2024-12-27T20:27:56.979Z",
				"updatedAt": "2024-12-27T20:27:56.979Z",
				"publishedAt": null,
				"locale": null,
				"description": null,
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"77": {
				"id": 77,
				"documentId": "c43903vf9zuli0zfxa8d9sk9",
				"title": "Bundestagsmitglieder und Todesursache",
				"query": "MATCH (cause:Entity)-[r:CAUSE_OF_DEATH]-(person:Entity)-[:POSITION_HELD]->(position:Entity {label:'member of the German Bundestag'})\nRETURN person, r, cause",
				"createdAt": "2024-12-27T20:30:02.162Z",
				"updatedAt": "2024-12-27T20:30:25.264Z",
				"publishedAt": null,
				"locale": null,
				"description": null,
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			},
			"80": {
				"id": 80,
				"documentId": "mtems5snamwff6pwed75otsx",
				"title": "Alle Kaiser mit Verwandtschaft und Personendaten",
				"query": "MATCH (p:Entity)-[:POSITION_HELD]->(e:Entity {label:'Holy Roman Emperor'})\nWHERE p.label IS NOT NULL\nAND p.label <> ''\nOPTIONAL MATCH (p)-[:DATE_OF_BIRTH]->(db)\nOPTIONAL MATCH (p)-[:DATE_OF_DEATH]->(dd)\nOPTIONAL MATCH (p)-[:PLACE_OF_BIRTH]->(pb)\nOPTIONAL MATCH (p)-[:PLACE_OF_DEATH]->(pd)\nOPTIONAL MATCH (p)-[:CHILD]-(ch:Entity)\nOPTIONAL MATCH (p)-[:SPOUSE]-(sp:Entity)\nOPTIONAL MATCH (p)-[:SIBLING]-(sb:Entity)\nOPTIONAL MATCH (p)-[:CAUSE_OF_DEATH]-(cd:Entity)\nOPTIONAL MATCH (p)-[:POSITION_HELD]-(ph:Entity)\nRETURN p.label AS Label, p.id AS WikidataId, db.label AS dateOfBirth, dd.label AS dateOfDeath, pb.label AS placeOfBirth, pd.label AS placeOfDeath, COLLECT(DISTINCT sp.label) AS spouse, COLLECT(DISTINCT ch.label) AS child, COLLECT(DISTINCT sb.label) AS sibling, COLLECT(DISTINCT ph.label) AS positionHeld, cd.label AS causeOfDeath;\n",
				"createdAt": "2024-12-27T20:37:23.961Z",
				"updatedAt": "2024-12-27T20:41:08.309Z",
				"publishedAt": null,
				"locale": null,
				"description": null,
				"cover": null,
				"database": 11,
				"localizations": [],
				"createdBy": null,
				"updatedBy": null
			}
		},
		"plugin::upload.file": {
			"1": {
				"id": 1,
				"name": "2f2d5285-fd85-4271-a19b-55fa79649ff6.png",
				"alternativeText": null,
				"caption": null,
				"hash": "2f2d5285_fd85_4271_a19b_55fa79649ff6_02e657c67d",
				"ext": ".png",
				"mime": "image/png",
				"url": "/uploads/2f2d5285_fd85_4271_a19b_55fa79649ff6_02e657c67d.png",
				"createdAt": "2024-12-21T14:18:28.154Z",
				"updatedAt": "2024-12-21T14:18:28.154Z",
				"createdBy": null,
				"updatedBy": null
			}
		},
		"plugin::upload.folder": {}
	}
}