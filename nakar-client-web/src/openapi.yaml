openapi: 3.0.0
paths:
  /scenario:
    get:
      operationId: ScenarioController_get
      parameters: []
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScenariosDto'
      tags:
        - Scenario
    post:
      operationId: ScenarioController_post
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPostScenarioDto'
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScenarioDto'
      tags:
        - Scenario
  /scenario/{id}:
    get:
      operationId: ScenarioController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScenarioDto'
      tags:
        - Scenario
    put:
      operationId: ScenarioController_put
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPostScenarioDto'
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScenarioDto'
      tags:
        - Scenario
    delete:
      operationId: ScenarioController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - Scenario
  /database-definition:
    get:
      operationId: DatabaseDefinitionController_get
      parameters: []
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDatabaseDefinitionsDto'
      tags:
        - DatabaseDefinition
    post:
      operationId: DatabaseDefinitionController_post
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPostDatabaseDefinitionDto'
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDatabaseDefinitionDto'
      tags:
        - DatabaseDefinition
  /database-definition/{id}:
    get:
      operationId: DatabaseDefinitionController_getById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDatabaseDefinitionDto'
      tags:
        - DatabaseDefinition
    put:
      operationId: DatabaseDefinitionController_put
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPostDatabaseDefinitionDto'
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDatabaseDefinitionDto'
      tags:
        - DatabaseDefinition
    delete:
      operationId: DatabaseDefinitionController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - DatabaseDefinition
  /graph/{scenarioId}/initial:
    get:
      operationId: GraphController_getGraph
      parameters:
        - name: scenarioId
          required: true
          in: path
          schema:
            type: number
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphDto'
      tags:
        - Graph
info:
  title: NAKAR Server
  description: >-
    This server translates various graph databases and scenarios into a simple
    graph-structure to be consumed by nakar clients.
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
    description: The default testing server for local development.
components:
  schemas:
    GetScenarioDto:
      type: object
      properties:
        id:
          type: number
          example: 57382
        title:
          type: string
          example: Common blobs of nodes
        query:
          type: string
          example: MATCH ...
        databaseDefinitionId:
          type: number
          example: 3762
        createDate:
          format: date-time
          type: string
          example: '2024-12-20T15:46:28.000Z'
        updateDate:
          format: date-time
          type: string
          example: '2024-12-20T15:46:28.000Z'
        version:
          type: number
          example: 1
      required:
        - id
        - title
        - query
        - databaseDefinitionId
        - createDate
        - updateDate
        - version
    GetScenariosDto:
      type: object
      properties:
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/GetScenarioDto'
      required:
        - scenarios
    PutPostScenarioDto:
      type: object
      properties:
        title:
          type: string
          example: Common blobs of nodes
        query:
          type: string
          example: MATCH ...
        databaseDefinitionId:
          type: number
          example: 3762
      required:
        - title
        - query
        - databaseDefinitionId
    GetDatabaseDefinitionDto:
      type: object
      properties:
        id:
          type: number
          example: 57382
        title:
          type: string
          example: POSE Database
        host:
          type: string
          example: localhost
        port:
          type: number
          example: 7548
        username:
          type: string
          example: neo4j
        createDate:
          format: date-time
          type: string
          example: '2024-12-20T15:46:28.000Z'
        updateDate:
          format: date-time
          type: string
          example: '2024-12-20T15:46:28.000Z'
        version:
          type: number
          example: 1
      required:
        - id
        - title
        - host
        - port
        - username
        - createDate
        - updateDate
        - version
    GetDatabaseDefinitionsDto:
      type: object
      properties:
        databaseDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/GetDatabaseDefinitionDto'
      required:
        - databaseDefinitions
    PutPostDatabaseDefinitionDto:
      type: object
      properties:
        title:
          type: string
          example: POSE Database
        host:
          type: string
          example: localhost
        port:
          type: number
          example: 7548
        username:
          type: string
          example: neo4j
        password:
          type: string
          example: '12345678'
      required:
        - title
        - host
        - port
        - username
        - password
    PropertyDto:
      type: object
      properties:
        slug:
          type: string
        value:
          type: string
      required:
        - slug
        - value
    NodeDto:
      type: object
      properties:
        id:
          type: string
        displayTitle:
          type: string
        type:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDto'
      required:
        - id
        - displayTitle
        - type
        - properties
    EdgeDto:
      type: object
      properties:
        id:
          type: string
        startNodeId:
          type: string
        endNodeId:
          type: string
        type:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDto'
      required:
        - id
        - startNodeId
        - endNodeId
        - type
        - properties
    GraphDto:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeDto'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/EdgeDto'
      required:
        - nodes
        - edges